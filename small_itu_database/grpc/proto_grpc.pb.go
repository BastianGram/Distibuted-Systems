// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ITUDatabase_Join_FullMethodName          = "/ITUDatabase/Join"
	ITUDatabase_Broadcast_FullMethodName     = "/ITUDatabase/Broadcast"
	ITUDatabase_ClientLeaving_FullMethodName = "/ITUDatabase/ClientLeaving"
)

// ITUDatabaseClient is the client API for ITUDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITUDatabaseClient interface {
	Join(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error)
	Broadcast(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error)
	ClientLeaving(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error)
}

type iTUDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewITUDatabaseClient(cc grpc.ClientConnInterface) ITUDatabaseClient {
	return &iTUDatabaseClient{cc}
}

func (c *iTUDatabaseClient) Join(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ITUDatabase_ServiceDesc.Streams[0], ITUDatabase_Join_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_JoinClient = grpc.ServerStreamingClient[ServerMessage]

func (c *iTUDatabaseClient) Broadcast(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ITUDatabase_ServiceDesc.Streams[1], ITUDatabase_Broadcast_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_BroadcastClient = grpc.ServerStreamingClient[ServerMessage]

func (c *iTUDatabaseClient) ClientLeaving(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ITUDatabase_ServiceDesc.Streams[2], ITUDatabase_ClientLeaving_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_ClientLeavingClient = grpc.ServerStreamingClient[ServerMessage]

// ITUDatabaseServer is the server API for ITUDatabase service.
// All implementations must embed UnimplementedITUDatabaseServer
// for forward compatibility.
type ITUDatabaseServer interface {
	Join(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error
	Broadcast(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error
	ClientLeaving(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error
	mustEmbedUnimplementedITUDatabaseServer()
}

// UnimplementedITUDatabaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedITUDatabaseServer struct{}

func (UnimplementedITUDatabaseServer) Join(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedITUDatabaseServer) Broadcast(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedITUDatabaseServer) ClientLeaving(*ClientMessage, grpc.ServerStreamingServer[ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientLeaving not implemented")
}
func (UnimplementedITUDatabaseServer) mustEmbedUnimplementedITUDatabaseServer() {}
func (UnimplementedITUDatabaseServer) testEmbeddedByValue()                     {}

// UnsafeITUDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITUDatabaseServer will
// result in compilation errors.
type UnsafeITUDatabaseServer interface {
	mustEmbedUnimplementedITUDatabaseServer()
}

func RegisterITUDatabaseServer(s grpc.ServiceRegistrar, srv ITUDatabaseServer) {
	// If the following call pancis, it indicates UnimplementedITUDatabaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ITUDatabase_ServiceDesc, srv)
}

func _ITUDatabase_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ITUDatabaseServer).Join(m, &grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_JoinServer = grpc.ServerStreamingServer[ServerMessage]

func _ITUDatabase_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ITUDatabaseServer).Broadcast(m, &grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_BroadcastServer = grpc.ServerStreamingServer[ServerMessage]

func _ITUDatabase_ClientLeaving_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ITUDatabaseServer).ClientLeaving(m, &grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ITUDatabase_ClientLeavingServer = grpc.ServerStreamingServer[ServerMessage]

// ITUDatabase_ServiceDesc is the grpc.ServiceDesc for ITUDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ITUDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ITUDatabase",
	HandlerType: (*ITUDatabaseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _ITUDatabase_Join_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Broadcast",
			Handler:       _ITUDatabase_Broadcast_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientLeaving",
			Handler:       _ITUDatabase_ClientLeaving_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
