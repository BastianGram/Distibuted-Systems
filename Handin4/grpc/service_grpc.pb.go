// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: grpc/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ITUDatabase_NotifyJoin_FullMethodName  = "/ITUDatabase/NotifyJoin"
	ITUDatabase_Election_FullMethodName    = "/ITUDatabase/Election"
	ITUDatabase_Broadcast_FullMethodName   = "/ITUDatabase/Broadcast"
	ITUDatabase_Coordinator_FullMethodName = "/ITUDatabase/Coordinator"
)

// ITUDatabaseClient is the client API for ITUDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITUDatabaseClient interface {
	NotifyJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Election(ctx context.Context, in *RequestElection, opts ...grpc.CallOption) (*Answer, error)
	Broadcast(ctx context.Context, in *RequestCS, opts ...grpc.CallOption) (*ResponseCS, error)
	Coordinator(ctx context.Context, in *IAmCoordinator, opts ...grpc.CallOption) (*SendsAllegiance, error)
}

type iTUDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewITUDatabaseClient(cc grpc.ClientConnInterface) ITUDatabaseClient {
	return &iTUDatabaseClient{cc}
}

func (c *iTUDatabaseClient) NotifyJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ITUDatabase_NotifyJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTUDatabaseClient) Election(ctx context.Context, in *RequestElection, opts ...grpc.CallOption) (*Answer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Answer)
	err := c.cc.Invoke(ctx, ITUDatabase_Election_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTUDatabaseClient) Broadcast(ctx context.Context, in *RequestCS, opts ...grpc.CallOption) (*ResponseCS, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseCS)
	err := c.cc.Invoke(ctx, ITUDatabase_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTUDatabaseClient) Coordinator(ctx context.Context, in *IAmCoordinator, opts ...grpc.CallOption) (*SendsAllegiance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendsAllegiance)
	err := c.cc.Invoke(ctx, ITUDatabase_Coordinator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ITUDatabaseServer is the server API for ITUDatabase service.
// All implementations must embed UnimplementedITUDatabaseServer
// for forward compatibility.
type ITUDatabaseServer interface {
	NotifyJoin(context.Context, *JoinRequest) (*JoinResponse, error)
	Election(context.Context, *RequestElection) (*Answer, error)
	Broadcast(context.Context, *RequestCS) (*ResponseCS, error)
	Coordinator(context.Context, *IAmCoordinator) (*SendsAllegiance, error)
	mustEmbedUnimplementedITUDatabaseServer()
}

// UnimplementedITUDatabaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedITUDatabaseServer struct{}

func (UnimplementedITUDatabaseServer) NotifyJoin(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyJoin not implemented")
}
func (UnimplementedITUDatabaseServer) Election(context.Context, *RequestElection) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedITUDatabaseServer) Broadcast(context.Context, *RequestCS) (*ResponseCS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedITUDatabaseServer) Coordinator(context.Context, *IAmCoordinator) (*SendsAllegiance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coordinator not implemented")
}
func (UnimplementedITUDatabaseServer) mustEmbedUnimplementedITUDatabaseServer() {}
func (UnimplementedITUDatabaseServer) testEmbeddedByValue()                     {}

// UnsafeITUDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITUDatabaseServer will
// result in compilation errors.
type UnsafeITUDatabaseServer interface {
	mustEmbedUnimplementedITUDatabaseServer()
}

func RegisterITUDatabaseServer(s grpc.ServiceRegistrar, srv ITUDatabaseServer) {
	// If the following call pancis, it indicates UnimplementedITUDatabaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ITUDatabase_ServiceDesc, srv)
}

func _ITUDatabase_NotifyJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUDatabaseServer).NotifyJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITUDatabase_NotifyJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUDatabaseServer).NotifyJoin(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITUDatabase_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestElection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUDatabaseServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITUDatabase_Election_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUDatabaseServer).Election(ctx, req.(*RequestElection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITUDatabase_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUDatabaseServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITUDatabase_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUDatabaseServer).Broadcast(ctx, req.(*RequestCS))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITUDatabase_Coordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IAmCoordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUDatabaseServer).Coordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ITUDatabase_Coordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUDatabaseServer).Coordinator(ctx, req.(*IAmCoordinator))
	}
	return interceptor(ctx, in, info, handler)
}

// ITUDatabase_ServiceDesc is the grpc.ServiceDesc for ITUDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ITUDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ITUDatabase",
	HandlerType: (*ITUDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyJoin",
			Handler:    _ITUDatabase_NotifyJoin_Handler,
		},
		{
			MethodName: "Election",
			Handler:    _ITUDatabase_Election_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _ITUDatabase_Broadcast_Handler,
		},
		{
			MethodName: "Coordinator",
			Handler:    _ITUDatabase_Coordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/service.proto",
}
